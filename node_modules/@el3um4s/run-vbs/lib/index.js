"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runVbsFileBuffer = exports.runVbsBuffer = exports.runVbsFile = exports.runVbs = void 0;
const execute_1 = require("././functions/execute");
const createTempVbsFile_1 = require("./functions/createTempVbsFile");
const runVbsFile = (data) => __awaiter(void 0, void 0, void 0, function* () {
    const { vbs, args } = data;
    const a = args ? args : [];
    const result = yield (0, execute_1.execute)(vbs, a);
    return result.trim();
});
exports.runVbsFile = runVbsFile;
const runVbs = (data) => __awaiter(void 0, void 0, void 0, function* () {
    const { vbs, args } = data;
    const vbsTempFile = yield (0, createTempVbsFile_1.writeScriptToTempFile)(vbs);
    const a = args ? args : [];
    const result = yield (0, execute_1.execute)(vbsTempFile, a);
    yield (0, createTempVbsFile_1.deleteTempFile)(vbsTempFile);
    return result.trim();
});
exports.runVbs = runVbs;
const runVbsFileBuffer = (data) => __awaiter(void 0, void 0, void 0, function* () {
    const { vbs, args } = data;
    const a = args ? args : [];
    const result = yield (0, execute_1.executeBuffer)(vbs, a);
    return result;
});
exports.runVbsFileBuffer = runVbsFileBuffer;
const runVbsBuffer = (data) => __awaiter(void 0, void 0, void 0, function* () {
    const { vbs, args } = data;
    const vbsTempFile = yield (0, createTempVbsFile_1.writeScriptToTempFile)(vbs);
    const a = args ? args : [];
    const result = yield (0, execute_1.executeBuffer)(vbsTempFile, a);
    yield (0, createTempVbsFile_1.deleteTempFile)(vbsTempFile);
    return result;
});
exports.runVbsBuffer = runVbsBuffer;
